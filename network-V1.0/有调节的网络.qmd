---
title: "有调节的网络"
format: html
editor: visual
---

### 1 有调节的网络简介

-   网络模型是分析多变量数据中依赖关系的强大工具，尤其在精神病学、心理学研究中越来越受欢迎。

-   传统的网络模型，如高斯图形模型（GGM），假设变量对之间的相互作用是独立的，但这在心理学、症状科学研究中往往不现实。

-   有学者提出了一种新的网络模型------有调节的网络模型（Moderated Network Models，MNMs），它通过引入调节变量来扩展传统的成对网络模型，提出了一种基于L1正则化的节点级回归方法来估计这种模型。

-   模拟研究发现，MNM在检测调节效应方面优于基于分割样本的方法，如网络比较（NCT）和融合图形lasso（FGL）。

调节效应（Moderation Effect）大家应该不陌生，其是统计学和社会科学研究中的一个重要概念，描述了一个变量（称为调节变量或调节因子）如何影响另外两个变量之间关系的方向（正向或负向）和强度（强或弱）的现象。换句话说，调节效应是指一个变量的存在改变了另外两个变量之间关系的模式。

将调节效应扩展到网络模型，构建有调节的网络模型，可以为我们提供更深入、更细致的洞察，更好地理解变量间复杂的相互关系，具备一些作用和优势，比如：构建更真实的模型；发现潜在的调节变量；发现和确认哪些变量可能作为重要的调节变量，影响其他变量间的关系；提高预测准确性；个性化干预：解决研究间的不一致性；提高模型的解释力；探索变量的非线性关系。

理论层面的内容不是短短的篇幅可以解释清楚的，大家不妨去读一读一篇名为《Moderated Network Models》的论文，很经典，论文里面有对有调节的网络模型的详细介绍，甚至还提供了完全可以复现的代码，以及对代码和结果的解释。

![](images/有调节的网络模型-论文.png){fig-align="center"}

### 2 如何构建有调节的网络

为了避免版本兼容性问题，大家可以先跳转到文末看看我使用的R语言环境。

#### 2.1 mgm包

本次我们会使用到一个叫做mgm的R包，前面计算可预测性值的时候是有用过的，这次我们同样会用它来构建一个有调节的网络模型。

按照惯例，我们先导入包和数据，如果你还没有安装，请先安装。

```{r}
#| label: load-packages
#| include: false

library(mgm)
library(qgraph)
```

#### 2.2 演示用的数据

本次将采用一个叫做msq_p5的数据集来进行演示，此数据集内置于mgm包，包含5个变量、3896行，变量的大概含义：

-   **hostile** - 主持敌意或敌对情绪的倾向。

-   **lonely** - 感到孤独或被排斥的情绪。

-   **nervous** - 感到紧张或不安的情绪。

-   **sleepy** - 感到困倦或疲倦的情绪。

-   **depressed** - 感到沮丧或情绪低落的倾向。

具体的含义和更多的细节请查询mgm包的帮助文档，数据具体如何并不重要，在此仅演示用法。

```{r}
data(msq_p5) 
dim(msq_p5)
str(msq_p5)
head(msq_p5)
```

#### 2.3 建模

上一节没有详细说明mgm包和mgm函数，是准备在这里面进行介绍。

mgm包的作用是Estimating Time-Varying k-order Mixed Graphical Models，也就是估计时变k阶混合图模型。更具体的，它通过弹性网正则化邻域回归估计时变混合图模型和混合VAR模型。其中的mgm函数就是用于建模的主函数，主要有下面几个参数（本期次用到的）：

-   data接收矩阵输入；

-   type指定变量类型（因为mgm是为混合图模型设计的，所以很可能会遇到混合类型的数据）；

-   level指定变量的水平（如果是连续变量，水平默认=1）；

-   ambdaSel指定选择Lq正则化的调优方法：要么CV交叉验证，要么EBIC（Extended Bayesian Information Criterion）。

-   ruleReg用于指定组合来自邻域回归的估计值的规则，对于成对交互作用，两个估计值(一个来自A对B的回归，一个来自B对A的回归)必须在单个边缘参数中组合。ruleReg="AND"要求所有估计值都不为零，以便将边缘设置为存在。ruleReg="OR"要求至少有一个估计值不为零，以便将边缘设置为出现。

-   moderators接收一个整数向量，指定纳入模型的调节变量，这里我们不清楚哪个是潜在的调节变量，不妨探索性设置为每个节点。

-   scale=T是默认的，用于标准化连续变量，做调节效应是得做这么一件事。

```{r}
mgm_mod = mgm(data = as.matrix(msq_p5), 
               type = rep("g", 5), #指定变量类型，均为连续变量g
               level = rep(1, 5),  #连续变量的水平默认=1
               lambdaSel = "EBIC", #采用EBIC估计
               lambdaGam = .5,  #lasso惩罚系数，也可换用'CV'
               ruleReg = "AND", 
               moderators = 1:5,#因调节变量未知，探索性设置
               scale = TRUE #标准化,均值为0、标准差为1 
               )
```

#### 2.4 估计效应值

接下来，显示显著的效应项：

```{r}
mgm_mod$interactions$indicator
```

查看成对交互（边）：

```{r}
showInteraction(object = mgm_mod, int = c(2,5))
```

边2-5的权重是0.4318148，它的含义与我们在横断面网络中计算得到的边缘权重类似。还可以查看三向交互（3-way interaction，即调节效应）：

```{r}
showInteraction(object = mgm_mod, int = c(3,4,5))
```

节点3-4-5之间的权重是0.0564465，这个不好解释，可以再分开查询下3-5,4-5的效应。

```{r}
showInteraction(object = mgm_mod, int = c(4,5))
```

```{r}
showInteraction(object = mgm_mod, int = c(3,5))
```

根据这两个成对效应指标，我们可以这样解释3-4-5之间的调节效应：

当nervous（节点3） 为0时，sleepy （节点4）与depressed（节点5）的成对交互作用为0.153；当紧张增加1个单位时，成对交互作用增加约0.06（ 0.0564465 ）；当sleepy为0时，抑郁与紧张之间的成对交互作用约为0.103，当sleepy增加1个单位时，nervous和depressed的成对交互作用增加约0.06。

#### 2.5 可视化

mgm提供了可视化有调节网络的函数：

```{r}
# 显示全部效应
FactorGraph(object = mgm_mod,
            edge.labels = TRUE,
            labels = colnames(msq_p5))
```

如果不想显示成对交互作用，也可以仅显示三向交互：

```{r}
FactorGraph(object = mgm_mod,
            labels = colnames(msq_p5),
            PairwiseAsEdge = TRUE,
            edge.labels = FALSE)
```

我们也可以用常规思路估计和可视化网络，思路是先提取矩阵(比如这里是mgm_mod$pairwise$wadj)，然后再传入qgraph函数。

```{r}
mgm_mod$pairwise$wadj
```

```{r}
q = qgraph(mgm_mod$pairwise$wadj,#相关矩阵
           layout = "spring",#图形布局算法
           details = TRUE, #显示细节
           theme='colorblind'#主题
           ) 
```

如果调节变量是分类的，可以分别估计不同调节水平下的网络：思路是先分离，然后再估计网络。本例没有分类变量，所以就不演示了。

还可以利用mgm自带的函数进行稳定性检验（edge），先抽样：

```{r}
res_obj = resample(object = mgm_mod, 
                    data = as.matrix(msq_p5),
                    nB = 50,
                   pbar=F) #为了方便，仅抽样少数次

```

然后可以借助plotRes绘图：

```{r}
suppressWarnings(
  plotRes(object = res_obj, 
        labels = NULL, 
        axis.ticks = c(-.25, 0, .25, .5, .75))
        )
```

> 本次出现了"长的对象长度不是短的对象长度的整倍数"的警告信息，暂不知如何解决，欢迎指导或者纠正。get到解决方案后，我会对这块内容进行修订、补充。

#### **运行环境**

```{r}
sessionInfo()
```
