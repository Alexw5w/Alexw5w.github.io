{
  "hash": "5936e853524b65cf9277235f270cff94",
  "result": {
    "markdown": "---\ntitle: \"横断面网络\"\nformat: html\neditor: visual\n---\n\n\n从这节开始，将分段演示如何采用R软件进行各种网络分析建模，主要内容请见右上角的目录。\n\n为避免出现版本兼容性问题，大家可以先看看我使用的编程环境（见文末）。\n\n### 1 导入工具包\n\n依次导入下面六个包，第一个和第六个包是辅助包，提供了一些不错的工具；第二个是本期分析主要使用的包，第三个包提供了一些本次会用到的数据，第四个第五个是非常关键的包，包括但不限于用于计算稳定性和可预测性。\n\n如果你还没安装，请先执行被注释掉的\"install.packages\"语句。\n\n\n\n\n\n### 2 整理数据\n\n这里使用的是bfi人格问卷数据，这份数据是R语言内置的公开数据集。具体细节请使用?psych::bfi查询。\n\n网络分析比较吃硬件资源，所以这次我们仅选取少量数据进行分析：500x15，即500人，15个条目。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd = bfi[1:500,1:15] \nstr(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t500 obs. of  15 variables:\n $ A1: int  2 2 5 4 2 6 2 4 4 2 ...\n $ A2: int  4 4 4 4 3 6 5 3 3 5 ...\n $ A3: int  3 5 5 6 3 5 5 1 6 6 ...\n $ A4: int  4 2 4 5 4 6 3 5 3 6 ...\n $ A5: int  4 5 4 5 5 5 5 1 3 5 ...\n $ C1: int  2 5 4 4 4 6 5 3 6 6 ...\n $ C2: int  3 4 5 4 4 6 4 2 6 5 ...\n $ C3: int  3 4 4 3 5 6 4 4 3 6 ...\n $ C4: int  4 3 2 5 3 1 2 2 4 2 ...\n $ C5: int  4 4 5 5 2 3 3 4 5 1 ...\n $ E1: int  3 1 2 5 2 2 4 3 5 2 ...\n $ E2: int  3 1 4 3 2 1 3 6 3 2 ...\n $ E3: int  3 6 4 4 5 6 4 4 NA 4 ...\n $ E4: int  4 4 4 4 4 5 5 2 4 5 ...\n $ E5: int  4 3 5 4 5 6 5 1 3 5 ...\n```\n:::\n\n```{.r .cell-code}\nhead(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      A1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5\n61617  2  4  3  4  4  2  3  3  4  4  3  3  3  4  4\n61618  2  4  5  2  5  5  4  4  3  4  1  1  6  4  3\n61620  5  4  5  4  4  4  5  4  2  5  2  4  4  4  5\n61621  4  4  6  5  5  4  4  3  5  5  5  3  4  4  4\n61622  2  3  3  4  5  4  4  5  3  2  2  2  5  4  5\n61623  6  6  5  6  5  6  6  6  1  3  2  1  6  5  6\n```\n:::\n:::\n\n\n由于横断面网络分析不能有缺失值，所以来个简单处理：剔除有缺失值的行。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd=na.omit(md)\nstr(md)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t468 obs. of  15 variables:\n $ A1: int  2 2 5 4 2 6 2 4 2 4 ...\n $ A2: int  4 4 4 4 3 6 5 3 5 4 ...\n $ A3: int  3 5 5 6 3 5 5 1 6 5 ...\n $ A4: int  4 2 4 5 4 6 3 5 6 6 ...\n $ A5: int  4 5 4 5 5 5 5 1 5 5 ...\n $ C1: int  2 5 4 4 4 6 5 3 6 4 ...\n $ C2: int  3 4 5 4 4 6 4 2 5 3 ...\n $ C3: int  3 4 4 3 5 6 4 4 6 5 ...\n $ C4: int  4 3 2 5 3 1 2 2 2 3 ...\n $ C5: int  4 4 5 5 2 3 3 4 1 2 ...\n $ E1: int  3 1 2 5 2 2 4 3 2 1 ...\n $ E2: int  3 1 4 3 2 1 3 6 2 3 ...\n $ E3: int  3 6 4 4 5 6 4 4 4 2 ...\n $ E4: int  4 4 4 4 4 5 5 2 5 5 ...\n $ E5: int  4 3 5 4 5 6 5 1 5 4 ...\n - attr(*, \"na.action\")= 'omit' Named int [1:32] 9 63 66 72 90 107 112 130 133 168 ...\n  ..- attr(*, \"names\")= chr [1:32] \"61630\" \"61754\" \"61759\" \"61772\" ...\n```\n:::\n:::\n\n\n### 3 可视化网络模型\n\n一般有如下几个步骤：计算相关或者偏相关矩阵；分配组（可以是症状群，可以不用）；建模并可视化。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 计算相关矩阵\nCorMat=cor_auto(md)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nVariables detected as ordinal: A1; A2; A3; A4; A5; C1; C2; C3; C4; C5; E1; E2; E3; E4; E5\n```\n:::\n\n```{.r .cell-code}\n# 模拟分组向量，具体请根据自己的研究来\ngroups=c(rep('A',5),rep('C',5),rep('E',5))\n\n# 默认参数建模\nq = qgraph(CorMat,#相关矩阵\n           layout = \"spring\",#图形布局算法\n           groups=groups, #分组信息\n           details = TRUE, #显示细节\n           theme='colorblind'#主题\n           ) \n```\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n也可以不分组，看看效果。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq1 = qgraph(CorMat,#相关矩阵\n           layout = \"spring\",#图形布局算法\n           details = TRUE, #显示细节\n           theme='colorblind'#主题\n           ) \n```\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n你觉得图形不好看，自己根据函数的帮助文档自己调整参数。\n\n### 4 另一种建模方法\n\n发现了吗？横断面网络模型（同期网络）的建模和可视化是非常简单的，我一般喜欢用bootnet建模，当然了，由于设置的算法不同，这两者所得网络是有区别的，择其一即可。\n\n这里我们使用强大的bootnet包，等下我们做稳定性、准确性分析都会用到它。\n\n建模一行代码搞定，用默认参数问题不大。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estimate network\n# 这里输入的是原始数据，采用EBICglasso算法计算输入矩阵\nNetwork = estimateNetwork(md, default = \"EBICglasso\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating Network. Using package::function:\n  - qgraph::EBICglasso for EBIC model selection\n    - using glasso::glasso\n```\n:::\n\n```{.r .cell-code}\n# plot network\nplot(Network, layout = 'spring')\n```\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### 5 计算中心性指标\n\n计算第一个网络模型的中心性指标，很轻松。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentrality(q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$OutDegree\n      A1       A2       A3       A4       A5       C1       C2       C3 \n1.736067 4.136744 4.185174 3.459108 4.588298 3.147499 3.386425 2.647192 \n      C4       C5       E1       E2       E3       E4       E5 \n3.196841 3.106400 3.266836 4.002216 3.672419 4.181569 4.352452 \n\n$InDegree\n      A1       A2       A3       A4       A5       C1       C2       C3 \n1.736067 4.136744 4.185174 3.459108 4.588298 3.147499 3.386425 2.647192 \n      C4       C5       E1       E2       E3       E4       E5 \n3.196841 3.106400 3.266836 4.002216 3.672419 4.181569 4.352452 \n\n$Closeness\n        A1         A2         A3         A4         A5         C1         C2 \n0.01208905 0.01777845 0.01795918 0.01719543 0.01914391 0.01475588 0.01595325 \n        C3         C4         C5         E1         E2         E3         E4 \n0.01410542 0.01470529 0.01454764 0.01626079 0.01859869 0.01815438 0.01818626 \n        E5 \n0.02126792 \n\n$Betweenness\nA1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 \n 0 18  0  2  2  0  4  0  0  0  0  2  0  2 42 \n\n$InExpectedInfluence\n        A1         A2         A3         A4         A5         C1         C2 \n-1.0911530  1.6851506  1.9382873  1.6382411  1.9301633  0.8583539  1.4462001 \n        C3         C4         C5         E1         E2         E3         E4 \n 1.1753135 -1.2361655 -1.3086316 -1.6998553 -1.9861568  1.5919209  1.5421715 \n        E5 \n 1.4202353 \n\n$OutExpectedInfluence\n        A1         A2         A3         A4         A5         C1         C2 \n-1.0911530  1.6851506  1.9382873  1.6382411  1.9301633  0.8583539  1.4462001 \n        C3         C4         C5         E1         E2         E3         E4 \n 1.1753135 -1.2361655 -1.3086316 -1.6998553 -1.9861568  1.5919209  1.5421715 \n        E5 \n 1.4202353 \n\n$ShortestPathLengths\n         A1       A2       A3       A4       A5       C1       C2       C3\nA1 0.000000 2.192380 3.519328 4.767491 4.025087 7.422075 8.220801 7.501337\nA2 2.192380 0.000000 1.821282 2.575111 2.114002 5.229695 6.028421 5.308957\nA3 3.519328 1.821282 0.000000 2.729549 1.723567 5.757156 5.666207 5.070742\nA4 4.767491 2.575111 2.729549 0.000000 2.514570 5.766440 3.539533 5.569323\nA5 4.025087 2.114002 1.723567 2.514570 0.000000 6.398416 5.521765 6.701127\nC1 7.422075 5.229695 5.757156 5.766440 6.398416 0.000000 2.226907 2.892613\nC2 8.220801 6.028421 5.666207 3.539533 5.521765 2.226907 0.000000 2.236184\nC3 7.501337 5.308957 5.070742 5.569323 6.701127 2.892613 2.236184 0.000000\nC4 7.325279 6.213435 6.957908 5.724084 6.002827 2.455908 2.184551 3.045985\nC5 8.878911 6.859716 6.005458 4.284605 4.853824 3.886195 3.328085 2.940947\nE1 6.292386 4.100005 4.166015 5.008539 3.107798 6.214881 5.338229 6.517591\nE2 6.476632 4.284251 3.228590 4.074237 2.484376 4.568518 4.887529 6.066891\nE3 5.225746 3.033365 2.739891 4.427392 2.241199 5.879803 5.003151 6.182513\nE4 5.051349 2.858969 2.619437 2.938715 1.825769 5.394177 5.701641 6.881003\nE5 5.820650 3.628270 3.676697 4.235405 2.721615 3.676801 2.800149 3.979511\n         C4       C5       E1       E2       E3       E4       E5\nA1 7.325279 8.878911 6.292386 6.476632 5.225746 5.051349 5.820650\nA2 6.213435 6.859716 4.100005 4.284251 3.033365 2.858969 3.628270\nA3 6.957908 6.005458 4.166015 3.228590 2.739891 2.619437 3.676697\nA4 5.724084 4.284605 5.008539 4.074237 4.427392 2.938715 4.235405\nA5 6.002827 4.853824 3.107798 2.484376 2.241199 1.825769 2.721615\nC1 2.455908 3.886195 6.214881 4.568518 5.879803 5.394177 3.676801\nC2 2.184551 3.328085 5.338229 4.887529 5.003151 5.701641 2.800149\nC3 3.045985 2.940947 6.517591 6.066891 6.182513 6.881003 3.979511\nC4 0.000000 1.956734 5.819291 5.368590 5.484213 6.182702 3.281211\nC5 1.956734 0.000000 6.006993 4.300280 5.671915 6.297076 3.468913\nE1 5.819291 6.006993 0.000000 1.768919 2.549088 2.069824 2.538080\nE2 5.368590 4.300280 1.768919 0.000000 2.174253 1.996796 2.087379\nE3 5.484213 5.671915 2.549088 2.174253 0.000000 2.267609 2.203002\nE4 6.182702 6.297076 2.069824 1.996796 2.267609 0.000000 2.901491\nE5 3.281211 3.468913 2.538080 2.087379 2.203002 2.901491 0.000000\n\n$ShortestPaths\n   A1   A2   A3   A4   A5   C1   C2   C3   C4   C5   E1   E2   E3   E4   E5  \nA1 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nA2 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nA3 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nA4 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nA5 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nC1 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nC2 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nC3 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nC4 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nC5 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nE1 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nE2 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nE3 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nE4 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\nE5 NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL NULL\n```\n:::\n:::\n\n\n强度中心性报告了OutDegree与InDegree，但由于是横断面网络模型，所以它们是一样的，在有向图模型中，它们就会有差异了。\n\n可视化中心性指标：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentralityPlot(q, include=c(\"Strength\",\n                            'ExpectedInfluence',\n                            'Closeness',\n                            \"Betweenness\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n由于没有进行标准化处理，所以有些指标的x轴刻度范围有些大。可以加一个scale参数进行控制。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentralityPlot(q, include=c(\"Strength\",\n                            'ExpectedInfluence',\n                            'Closeness',\n                            \"Betweenness\"),\n                            scale = \"z-scores\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: z-scores are shown on x-axis rather than raw centrality indices.\n```\n:::\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### 6 桥梁节点分析\n\n在网络分析中，桥梁节点（Bridge Node）是指那些在不同社区或群组之间起到连接作用的节点。它们在网络中扮演着沟通不同群体的关键角色。桥梁节点的概念有助于识别那些在网络中可能对信息流通和群体间联系至关重要的节点。\n\n桥梁节点（桥梁症状）的识别通常涉及到计算所谓的\"桥梁中心性\"（Bridge Centrality），这是一种网络分析中用来识别节点在不同社区或群体间重要性的指标，同样包括3种：桥梁强度、桥梁紧密度、桥梁中介性。桥梁中心性可以通过不同的方法来计算，这里就不展开描述了。\n\n桥梁中心性的计算用代码很容易搞定：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbridge(CorMat, communities= groups, directed=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`Bridge Strength`\n       A1        A2        A3        A4        A5        C1        C2        C3 \n0.6192786 2.2701858 2.4054126 2.1786558 2.8889458 1.6882345 1.7319479 1.1859660 \n       C4        C5        E1        E2        E3        E4        E5 \n1.4925433 1.6975235 1.4320906 1.9970992 1.9252748 2.4119903 2.6808076 \n\n$`Bridge Betweenness`\nA1 A2 A3 A4 A5 C1 C2 C3 C4 C5 E1 E2 E3 E4 E5 \n28  0  0  0  0  0  1  0 24  0  0  1  0  0 39 \n\n$`Bridge Closeness`\n        A1         A2         A3         A4         A5         C1         C2 \n0.06040055 0.06449706 0.06464877 0.06334587 0.06633877 0.07740360 0.08148539 \n        C3         C4         C5         E1         E2         E3         E4 \n0.07593488 0.04662243 0.04377595 0.03678090 0.03806534 0.09428918 0.09357638 \n        E5 \n0.10564254 \n\n$`Bridge Expected Influence (1-step)`\n         A1          A2          A3          A4          A5          C1 \n 0.02563498  0.73084283  0.72681593  0.61394087  0.72769426  0.72809473 \n         C2          C3          C4          C5          E1          E2 \n 1.30818928  1.05074235 -0.55397879 -0.92186642 -0.99574380 -1.11167378 \n         E3          E4          E5 \n 1.54922696  1.74046318  1.49472703 \n\n$`Bridge Expected Influence (2-step)`\n       A1        A2        A3        A4        A5        C1        C2        C3 \n-1.003904  2.697975  2.833111  2.472744  2.982608  4.686390  5.172403  4.114575 \n       C4        C5        E1        E2        E3        E4        E5 \n-4.503411 -4.723141 -5.295025 -6.277542  6.184953  6.796393  6.512929 \n\n$communities\n [1] \"A\" \"A\" \"A\" \"A\" \"A\" \"C\" \"C\" \"C\" \"C\" \"C\" \"E\" \"E\" \"E\" \"E\" \"E\"\n```\n:::\n:::\n\n\n不但给出了3个桥梁中心性指标，还给出了预期影响（一步法、两步法都有）。可视化也是很容易的：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#可视化桥梁症状网络\nb = bridge(CorMat, communities= groups, directed=F) \nplot(b, \n     include=c(\"Bridge Expected Influence (2-step)\", \"Bridge Strength\", \"Bridge Closeness\"), #选择要呈现的指标\n     theme_bw=F, \n     raw0 = T, \n     signed=T,\n     zscore=T,     #标准化\n     order=\"value\"  #排序\n     ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Vectorized input to `element_text()` is not officially supported.\nℹ Results may be unexpected or may change in future versions of ggplot2.\nVectorized input to `element_text()` is not officially supported.\nℹ Results may be unexpected or may change in future versions of ggplot2.\nVectorized input to `element_text()` is not officially supported.\nℹ Results may be unexpected or may change in future versions of ggplot2.\n```\n:::\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n看到一些研究者在文献中推荐用桥梁强度最大的节点作为桥梁节点，但也有文献认为应使用第80百分位数的桥梁强度/预期影响截止值选择桥梁症状。这里演示下如何用桥梁强度查询符合条件的节点。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchoose_set = b$`Bridge Strength`>quantile(b$`Bridge Strength`,\n                             probs = 0.8,\n                             na.rm = T)\nnode_name = b$`Bridge Strength`[choose_set]\nnode_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      A5       E4       E5 \n2.888946 2.411990 2.680808 \n```\n:::\n:::\n\n\n可以看到，15个症状节点里面，有3个症状符合条件。如果你需要对其进行可视化，可以先标记出来，然后将其传入qgraph函数的groups参数。\n\n### 7 计算可预测性\n\n有些学者不推荐在同期/横断面网络分析中计算可预测性，但个人认为这是个不错的指标，相当于做了很多次回归分析，可以分析其他变量对节点的影响。计算方法其实很简单，这里演示下如何进行计算并对其进行可视化。\n\n用mgm包建模：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mgm需要输入矩阵形式的数据，所以先做转换\nmat_data = as.matrix(md)\n\n# 建模，参数调整的细节请看帮助文档，在后续的混合建模中也会讲到\npre_mod = mgm(data = mat_data,\n                   type = rep('g',15),\n                   level = rep(1,15),\n                   lambdaSel = \"CV\",\n                   ruleReg = \"AND\", \n                   # pbar = T, \n                   overparameterize = F, \n                   signInfo = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |-----                                                                 |   7%\n  |                                                                            \n  |---------                                                             |  13%\n  |                                                                            \n  |--------------                                                        |  20%\n  |                                                                            \n  |-------------------                                                   |  27%\n  |                                                                            \n  |-----------------------                                               |  33%\n  |                                                                            \n  |----------------------------                                          |  40%\n  |                                                                            \n  |---------------------------------                                     |  47%\n  |                                                                            \n  |-------------------------------------                                 |  53%\n  |                                                                            \n  |------------------------------------------                            |  60%\n  |                                                                            \n  |-----------------------------------------------                       |  67%\n  |                                                                            \n  |---------------------------------------------------                   |  73%\n  |                                                                            \n  |--------------------------------------------------------              |  80%\n  |                                                                            \n  |-------------------------------------------------------------         |  87%\n  |                                                                            \n  |-----------------------------------------------------------------     |  93%\n  |                                                                            \n  |----------------------------------------------------------------------| 100%\n```\n:::\n:::\n\n\n速度是很快的，建模后通过预测函数提取可预测性值：\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_mgm = predict(object = pre_mod, \n                    data = mat_data,\n                    errorCon = c(\"R2\"))\npred_mgm$errors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Variable    R2\n1        A1 0.198\n2        A2 0.402\n3        A3 0.378\n4        A4 0.228\n5        A5 0.444\n6        C1 0.243\n7        C2 0.356\n8        C3 0.262\n9        C4 0.350\n10       C5 0.280\n11       E1 0.334\n12       E2 0.420\n13       E3 0.328\n14       E4 0.405\n15       E5 0.357\n```\n:::\n:::\n\n\n有兴趣的话，你也可以对这个值进行排序。由于本节内容很多，就不展示具体操作了。\n\n接下来，建立网络模型并绘制带有可预测性值的网络图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNetwork2 = estimateNetwork(mat_data, default = \"EBICglasso\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating Network. Using package::function:\n  - qgraph::EBICglasso for EBIC model selection\n    - using glasso::glasso\n```\n:::\n\n```{.r .cell-code}\nplot(Network2,\n     layout = \"spring\",\n     pie=pred_mgm$errors[,2]\n     )\n```\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### 8 精确性、稳定性、差异性分析\n\nok，接下来就该进行精确性、稳定性以及差异性分析了，由于涉及到重抽样，这个步骤需要花费一些时间，具体看你的电脑配置，演示时会尽量减少抽样次数。\n\n我们继续用bootnet包进行分析：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaseboot = bootnet(md, \n                  default = \"EBICglasso\", \n                  threshold = FALSE,\n                  type=\"nonparametric\", #选择非参数自举法\n                  nCores = 8, #8线程，根据自己电脑配置来\n                  statistics=\"all\",\n                  nBoots=500 \n) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating sample network...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating Network. Using package::function:\n  - qgraph::EBICglasso for EBIC model selection\n    - using glasso::glasso\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBootstrapping...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing statistics...\n```\n:::\n:::\n\n\n> 注意：nBoots默认为1000，为提高速度，这里减少了次数，真实研究至少1000次以上。\n\n绘制边缘权重精确性分析图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(baseboot, labels=FALSE, order=\"sample\") #默认绘制的统计量是edge\n```\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n这个置信区间（阴影部分）还是有些宽的。绘制边缘权重差异性分析图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(baseboot,\n     statistics='edge',\n     plot = \"difference\", \n     onlyNonZero = T, \n     order = \"sample\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nExpected significance level given number of bootstrap samples is approximately: 0.05\n```\n:::\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n你是否会困惑：怎么看这幅图？答案是看黑格子数，黑色方格表示的是有两条边之间有显著差异，由于上面已经写了排序的代码，所以直接看y轴就可以了，越高的位置表示此edge与越多的其余edge有显著差异。这个例子，C4-C5与和E1-E2的边缘权重与其他有显著差别。\n\n同样，可以检验不同节点中心性之间的差异：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(baseboot, statistics=\"Strength\", plot=\"difference\",order = \"mean\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nExpected significance level given number of bootstrap samples is approximately: 0.049\n```\n:::\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n解释方法同前。上面是图形展示，当然是可以直接计算数值的，这里就不展示了，有需求的话，可以通过护理统计随笔公众号或者微信留言，会考虑通过更新的方式进行补充。\n\n中心性指标的稳定性也是可以通过bootnet进行计算：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 采用剔除案例法\ncaseboot = bootnet(md, \n                   nBoots = 500, \n                   nCores = 12, \n                   threshold = FALSE, \n                   default = \"EBICglasso\", \n                   type=\"case\", \n                   statistics=\"all\",\n                   verbose = F)\n```\n:::\n\n\n> 注意：nBoots默认为1000，为提高速度，这里减少了次数，真实研究至少1000次以上。\n\n计算相关稳定性系数CS：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorStability(caseboot) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n=== Correlation Stability Analysis === \n\nSampling levels tested:\n   nPerson Drop%  n\n1      117  75.0 60\n2      153  67.3 47\n3      190  59.4 54\n4      226  51.7 44\n5      263  43.8 50\n6      299  36.1 52\n7      335  28.4 63\n8      372  20.5 34\n9      408  12.8 51\n10     445   4.9 45\n\nMaximum drop proportions to retain correlation of 0.7 in at least 95% of the samples:\n\nbetweenness: 0.205 \n  - For more accuracy, run bootnet(..., caseMin = 0.128, caseMax = 0.284) \n\ncloseness: 0.284 \n  - For more accuracy, run bootnet(..., caseMin = 0.205, caseMax = 0.361) \n\ndistance: 0.594 \n  - For more accuracy, run bootnet(..., caseMin = 0.517, caseMax = 0.673) \n\nedge: 0.594 \n  - For more accuracy, run bootnet(..., caseMin = 0.517, caseMax = 0.673) \n\neigenvector: 0.517 \n  - For more accuracy, run bootnet(..., caseMin = 0.438, caseMax = 0.594) \n\nexpectedInfluence: 0.594 \n  - For more accuracy, run bootnet(..., caseMin = 0.517, caseMax = 0.673) \n\nhybrid: 0.438 \n  - For more accuracy, run bootnet(..., caseMin = 0.361, caseMax = 0.517) \n\nlength: 0 \n  - For more accuracy, run bootnet(..., caseMin = 0, caseMax = 0.049) \n\nrspbc: 0.594 \n  - For more accuracy, run bootnet(..., caseMin = 0.517, caseMax = 0.673) \n\nstrength: 0.594 \n  - For more accuracy, run bootnet(..., caseMin = 0.517, caseMax = 0.673) \n\nAccuracy can also be increased by increasing both 'nBoots' and 'caseN'.\n```\n:::\n:::\n\n\n绘图:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(caseboot, statistics=\"all\")\n```\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n选几个指标来绘图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(caseboot, statistics = c(\"Strength\",\"Closeness\",\n                             \"expectedInfluence\"))\n```\n\n::: {.cell-output-display}\n![](横断面网络完整版_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n**运行环境：**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=Chinese (Simplified)_China.utf8 \n[2] LC_CTYPE=Chinese (Simplified)_China.utf8   \n[3] LC_MONETARY=Chinese (Simplified)_China.utf8\n[4] LC_NUMERIC=C                               \n[5] LC_TIME=Chinese (Simplified)_China.utf8    \n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] networktools_1.5.1 mgm_1.2-14         bootnet_1.6        ggplot2_3.5.0     \n[5] psych_2.3.9        qgraph_1.9.8       psychTools_2.4.3  \n\nloaded via a namespace (and not attached):\n  [1] mnormt_2.1.1         pbapply_1.7-2        polynom_1.4-1       \n  [4] gridExtra_2.3        fdrtool_1.2.17       rlang_1.1.3         \n  [7] magrittr_2.0.3       e1071_1.7-13         compiler_4.3.2      \n [10] gdata_3.0.0          IsingSampler_0.2.3   png_0.1-8           \n [13] vctrs_0.6.4          reshape2_1.4.4       quadprog_1.5-8      \n [16] stringr_1.5.1        pkgconfig_2.0.3      shape_1.4.6         \n [19] fastmap_1.1.1        backports_1.4.1      labeling_0.4.3      \n [22] pbivnorm_0.6.0       utf8_1.2.4           rmarkdown_2.25      \n [25] NetworkToolbox_1.4.2 heplots_1.6.0        nloptr_2.0.3        \n [28] purrr_1.0.2          xfun_0.41            glmnet_4.1-8        \n [31] jomo_2.7-6           jsonlite_1.8.7       pan_1.9             \n [34] jpeg_0.1-10          broom_1.0.5          parallel_4.3.2      \n [37] lavaan_0.6-17        cluster_2.1.4        R6_2.5.1            \n [40] stringi_1.8.1        RColorBrewer_1.1-3   smacof_2.1-5        \n [43] car_3.1-2            boot_1.3-28.1        rpart_4.1.21        \n [46] Rcpp_1.0.11          iterators_1.0.14     knitr_1.45          \n [49] snow_0.4-4           base64enc_0.1-3      R.utils_2.12.3      \n [52] weights_1.0.4        Matrix_1.6-5         nnls_1.5            \n [55] splines_4.3.2        nnet_7.3-19          igraph_2.0.1.1      \n [58] tidyselect_1.2.0     rstudioapi_0.16.0    abind_1.4-5         \n [61] yaml_2.3.7           doParallel_1.0.17    codetools_0.2-19    \n [64] lattice_0.21-9       tibble_3.2.1         plyr_1.8.9          \n [67] withr_2.5.2          evaluate_0.23        foreign_0.8-85      \n [70] survival_3.5-7       proxy_0.4-27         pillar_1.9.0        \n [73] carData_3.0-5        mice_3.16.0          checkmate_2.3.0     \n [76] foreach_1.5.2        rtf_0.4-14.1         stats4_4.3.2        \n [79] IsingFit_0.4         ellipse_0.5.0        generics_0.1.3      \n [82] candisc_0.8-6        munsell_0.5.0        scales_1.3.0        \n [85] minqa_1.2.6          gtools_3.9.5         class_7.3-22        \n [88] glue_1.6.2           Hmisc_5.1-1          tools_4.3.2         \n [91] data.table_1.15.4    lme4_1.1-35.1        mvtnorm_1.2-3       \n [94] rgl_1.2.1            grid_4.3.2           plotrix_3.8-4       \n [97] tidyr_1.3.1          colorspace_2.1-0     nlme_3.1-163        \n[100] htmlTable_2.4.2      eigenmodel_1.11      Formula_1.2-5       \n[103] cli_3.6.2            fansi_1.0.5          dplyr_1.1.4         \n[106] corpcor_1.6.10       glasso_1.11          gtable_0.3.4        \n[109] R.methodsS3_1.8.2    digest_0.6.33        wordcloud_2.6       \n[112] farver_2.1.1         htmlwidgets_1.6.2    htmltools_0.5.7     \n[115] R.oo_1.25.0          lifecycle_1.0.4      mitml_0.4-5         \n[118] MASS_7.3-60         \n```\n:::\n:::\n",
    "supporting": [
      "横断面网络完整版_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}